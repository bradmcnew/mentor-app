generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid()) @db.Uuid
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  UserProfile UserProfile?
}

model Account {
  userId            String  @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String  @db.Uuid
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model UserProfile {
  id               String                 @id @default(uuid()) @db.Uuid
  userId           String                 @unique @db.Uuid
  firstName        String
  lastName         String
  bio              String?
  phoneNumber      String?
  location         String?
  profilePicture   String?
  socialMediaLinks Json?
  resume           String?
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  user             User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills           UserSkill[]
  availability     UserAvailability[]
  receivedReviews  CollegeStudentReview[] @relation("ReceivedReviews")
  givenReviews     CollegeStudentReview[] @relation("GivenReviews")
  studentBookings  Booking[]              @relation("StudentBookings")
  mentorBookings   Booking[]              @relation("MentorBookings")

  @@map("user_profiles")
}

model Skill {
  id         String      @id @default(uuid()) @db.Uuid
  name       String
  userSkills UserSkill[]

  @@map("skills")
}

model UserSkill {
  id            String      @id @default(uuid()) @db.Uuid
  userProfileId String      @db.Uuid
  skillId       String      @db.Uuid
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  skill         Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@index([userProfileId])
  @@index([skillId])
  @@map("user_skills")
}

model UserAvailability {
  id            String      @id @default(uuid()) @db.Uuid
  userProfileId String      @db.Uuid
  dayOfWeek     DayOfWeek
  startTime     DateTime
  endTime       DateTime
  userProfile   UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)

  @@index([userProfileId])
  @@map("user_availability")
}

model CollegeStudentReview {
  id                String      @id @default(uuid()) @db.Uuid
  reviewerProfileId String      @db.Uuid
  reviewedProfileId String      @db.Uuid
  rating            Int
  reviewText        String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  reviewerProfile   UserProfile @relation("GivenReviews", fields: [reviewerProfileId], references: [id], onDelete: Cascade)
  reviewedProfile   UserProfile @relation("ReceivedReviews", fields: [reviewedProfileId], references: [id], onDelete: Cascade)

  @@index([reviewerProfileId])
  @@index([reviewedProfileId])
  @@map("college_student_reviews")
}

model Booking {
  id            String        @id @default(uuid()) @db.Uuid
  studentId     String        @db.Uuid
  mentorId      String        @db.Uuid
  status        BookingStatus @default(pending)
  confirmedTime DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  student       UserProfile   @relation("StudentBookings", fields: [studentId], references: [id], onDelete: Cascade)
  mentor        UserProfile   @relation("MentorBookings", fields: [mentorId], references: [id], onDelete: Cascade)

  @@index([studentId])
  @@index([mentorId])
  @@map("bookings")
}

enum Role {
  high_school
  college_student
}

enum DayOfWeek {
  sunday
  monday
  tuesday
  wednesday
  thursday
  friday
  saturday
}

enum BookingStatus {
  pending
  confirmed
  cancelled
}
